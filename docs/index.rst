.. Community detection for NetworkX documentation master file, created by
   sphinx-quickstart on Fri Jan 15 11:13:59 2010.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.



.. toctree::
   :maxdepth: 3

   api.rst



Community detection for NetworkX's documentation
=================================================
This module implements community detection.


It uses the louvain method described in
Fast unfolding of communities in large networks,
Vincent D Blondel, Jean-Loup Guillaume, Renaud Lambiotte, Renaud Lefebvre,
Journal of Statistical Mechanics: Theory and Experiment 2008(10), P10008 (12pp)

It depends on Networkx to handle graph operations :
http://networkx.lanl.gov/

The program can be found in a repository where you can also report bugs :

.. raw:: html

    <a href="https://github.com/taynaud/python-louvain">https://github.com/taynaud/python-louvain</a>




Example :
=========

As a classical software :
-------------------------
You should consider using the cpp version at
http://findcommunities.googlepages.com/ !

./community.py file.bin > tree



where file.bin is a binary graph as generated by the convert utility of the cpp
version.

You can after that use the generated file with the hierarchy utility of the cpp
version.
Note that the program does not make much verifications about the arguments,
and is expecting a friendly use.

As python module :
------------------

::

    import community
    import networkx as nx
    import matplotlib.pyplot as plt

    #better with karate_graph() as defined in networkx example.
    #erdos renyi don't have true community structure
    G = nx.erdos_renyi_graph(30, 0.05)

    #first compute the best partition
    partition = community.best_partition(G)

    #drawing
    size = float(len(set(partition.values())))
    pos = nx.spring_layout(G)
    count = 0.
    for com in set(partition.values()) :
        count = count + 1.
        list_nodes = [nodes for nodes in partition.keys()
                                    if partition[nodes] == com]
        nx.draw_networkx_nodes(G, pos, list_nodes, node_size = 20,
                                    node_color = str(count / size))


    nx.draw_networkx_edges(G, pos, alpha=0.5)
    plt.show()




Changelog :
===========

* 2018-05-22 : 0.11, stop forcing networkx<2.0 and expose module __version__
* 2018-01-02 : 0.10, bug fix: taking into account the node removal cost
* 2017-09-21 : 0.9, support networkx 2.0
* 2017-06-03 : 0.8, add randomization and bugfixes
* 2017-05-21 : 0.7, migrate to github, readthedocs and travis. Add resolution parameter to control community size, bugfixes
* 04/21/2011 : modifications to use networkx like documentation and use of test.
* 02/22/2011 : correction of a bug regarding edge weights
* 01/14/2010 : modification to use networkx 1.01 graph api and adding the possibility to start the algorithm with a given partition
* 04/10/2009 : increase of the speed of the detection by caching node degrees



License :
=========
.. raw:: html

    Copyright (c) 2009, Thomas Aynaud &lt;<a href="mailto:thomas.aynaud@lip6.fr">thomas.aynaud@lip6.fr</a>&gt;<br>
    All rights reserved.<br><br>

    Redistribution and use in source and binary forms, with or without modification,
    are permitted provided that the following conditions are met:<br><br>

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.<br><br>

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.<br><br>

    * Neither the name of the python-louvain Developers nor the names of its
    contributors may be used to endorse or promote products derived from this
    software without specific prior written permission.<br><br><br>



    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
    OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

